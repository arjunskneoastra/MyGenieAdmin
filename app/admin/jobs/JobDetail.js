"use client";
import Modal from "@/app/Components/Modal";
import React, { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import API from "@/app/Services/API";
import Link from "next/link";

export default function JobDetail({ OpenListView }) {
  const [modals, setModals] = useState({
    CodeModal: false,
    PicModal: false,
    VideoModal: false,
    CBoxModal: false,
    CListModal: false,
  });
  const [modalData, setModalData] = useState({});
  const [activeTab, setActiveTab] = useState("tab1");
  const [issuesArray, setIssuesArray] = useState([]);
  const [startMilestone, setStartMilestone] = useState([]);
  const [endMilestone, setEndMilestone] = useState([]);
  // const [modalArray, setModalArray] = useState([]);
  const [imageArray, setImageArray] = useState([
  ]);
  const searchParams = useSearchParams();
  const jobId = searchParams.get("id");
  const [jobDetailData, setJobDetailData] = useState({});
  const [codeData,setCodeData] = useState(false)

  useEffect(()=>{
    // console.log(jobDetailData);
    if(modals.PicModal){
      const data = startMilestone.filter(e=>{
        if(e.milestone.type == 'photo'){
          return e
        }
      })
      setImageArray(data[0].answers?data[0].answers:[])
    }
    if(modals.CodeModal){
      const data = startMilestone.filter(e=>{
        if(e.milestone.type == 'code'){
          return e
        }
      })
      console.log(data);
      if(data[0].status == "pending"){
        setCodeData(false)
      }else{
        setCodeData(true)
      }
      // setImageArray(data[0].answers?data[0].answers:[])
    }

    // console.log(data);
  },[modals])

  const MSData = {
    startData: {
      code: {
        sText: "Autogenerated code",
        eText: "",
        linkText: "View code",
        modal: "CodeModal",
        modalText: "to start the job.",
      },
      photo: {
        sText: "Upload photo of",
        eText: "to start the job.",
        linkText: "View submission",
        modal: "PicModal",
      },
      video: {
        sText: "Upload video of",
        eText: "to start the job.",
        linkText: "View submission",
        modal: "VideoModal",
      },
      checklist: {
        sText: "Upload video of",
        eText: "to start the job.",
        linkText: "View submission",
        modal: "VideoModal",
      },
      checkbox: {
        sText: "Upload video of",
        eText: "to start the job.",
        linkText: "View submission",
        modal: "VideoModal",
      },
    },
    endData: {
      code: {
        sText: "Autogenerated code",
        eText: "",
        linkText: "View code",
        modal: "CodeModal",
        modalText: "to end the job.",
      },
      photo: {
        sText: "Upload photo of",
        eText: "to end the job.",
        linkText: "View submission",
        modal: "PicModal",
      },
      video: {
        sText: "Upload video of",
        eText: "to end the job.",
        linkText: "View submission",
        modal: "VideoModal",
      },
      checklist: {
        sText: "Please confirm",
        eText: "to end the job.",
        linkText: "View checklist",
        modal: "CListModal",
      },
      checkbox: {
        sText: "Please confirm that",
        eText: "to end the job.",
        linkText: "View checkbox",
        modal: "CBoxModal",
      },
    },
  };

  const openTab = (tabId) => {
    setActiveTab(tabId);
  };

  const openModal = (modalName, data, type) => {
    setModalData({ data: data, type: type });
    setModals((prevModals) => ({
      ...prevModals,
      [modalName]: true,
    }));
  };

  const closeModal = (modalName) => {
    setModals((prevModals) => ({
      ...prevModals,
      [modalName]: false,
    }));
  };

  const formatDate = (date) => {
    var d = new Date(date),
      month = "" + (d.getMonth() + 1),
      day = "" + d.getDate(),
      year = d.getFullYear();

    if (month.length < 2) month = "0" + month;
    if (day.length < 2) day = "0" + day;

    return [year, month, day].join("-");
  };

  function formatAMPM(date) {
    var d = new Date(date);
    var datetext = d.toTimeString();
    datetext = datetext.split(" ")[0];
    return datetext + " IST";
  }

  const loadJobDetail = () => {
    API.get(`admin/jobs/${jobId}/`)
      .then((response) => {
        const data = response.data.data;
        console.log({ data });
        if (data) {
          setJobDetailData(data);
          setStartMilestone(data.milestoneTemplateAnswer.startAnswers);
          setEndMilestone(data.milestoneTemplateAnswer.endAnswers);
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  useEffect(() => {
    console.log("coming");
    loadJobDetail();
  }, [jobId]);

  useEffect(() => {
    console.log(jobDetailData);
  }, [jobDetailData]);

  return (
    <div>
      <div className="flex justify-between items-center">
        <div className="flex items-center pb-4">
          <Link href={"/admin/jobs"}>
            <img
              onClick={() => OpenListView()}
              src="/images/icons/angle-left.svg"
              className="w-2 cursor-pointer"
            />
          </Link>
          <p className="text-black text-lg font-semibold pl-2">Job Details</p>
        </div>
        <div className="relative">
          <img src="/images/icons/bell-grey.svg" className="w-4 mr-2" />
          <div className="absolute w-2.5 h-2.5 bg-red-600 border-[3px] border-white-500 -top-1 right-1.5 rounded-full"></div>
        </div>
      </div>
      <div className=" grid grid-cols-10 gap-4">
        <div className="col-span-2">
          <div className="border border-gray-500 rounded-2xl bg-white-default h-[calc(100vh-12rem)]">
            <div className="border-b border-gray-500 text-black p-7">
              Job Information
            </div>
            <div className="h-[calc(100vh-18rem)] overflow-y-scroll hidescrollbar pl-7 pt-2 text-sm">
              <p className="text-gray-light mb-1">Job Owner</p>
              <p className="mb-2">{jobDetailData.jobOwner?.name}</p>
              <p className="text-gray-light mb-1">Client</p>
              <p className="mb-2">{jobDetailData.clientFocalPoint?.name}</p>
              <p className="text-gray-light mb-1">Category</p>
              <p className="mb-2">{jobDetailData.category?.name}</p>
              <p className="text-gray-light mb-1">Country</p>
              <p className="mb-2">{jobDetailData.property?.country.name}</p>
              <p className="text-gray-light mb-1">Assigned To</p>
              <p className="text-blue-500 underline mb-2">
                {jobDetailData.jobAssignment?.assignedTo.name}
              </p>
              <p className="text-gray-light mb-1">Price</p>
              <p className="mb-2">{jobDetailData.price}</p>
              <p className="text-gray-light mb-1">Location</p>
              <p className="mb-2">
                {jobDetailData.property?.name +
                  " " +
                  jobDetailData.property?.address}
              </p>
              <p className="text-gray-light mb-1">Date</p>
              <p className="mb-2">
                {jobDetailData.startDate && formatDate(jobDetailData.startDate)}
              </p>
              <p className="text-gray-light mb-1">Time</p>
              <p className="mb-2">
                {jobDetailData.startDate && formatAMPM(jobDetailData.startDate)}
              </p>
            </div>
          </div>
        </div>
        <div className="col-span-8">
          <div className="border border-gray-500 rounded-2xl bg-white-default h-[calc(100vh-12rem)] py-8 px-10">
            {/* Tab buttons */}
            <div className="flex justify-around">
              <div
                className={`py-2 px-4 cursor-pointer text-center w-full ${
                  activeTab === "tab1" ? "" : ""
                }`}
                onClick={() => openTab("tab1")}
              >
                <p className="text-black text-base mb-3">Milestone Progress</p>
                <div
                  className={` rounded-2xl py-1   ${
                    activeTab === "tab1" ? "bg-blue-500" : "bg-gray-500"
                  }`}
                ></div>
              </div>
              <div
                className={`py-2 px-4 cursor-pointer text-center w-full ${
                  activeTab === "tab2" ? "" : ""
                }`}
                onClick={() => openTab("tab2")}
              >
                <p className="text-black text-base mb-3">Issues</p>
                <div
                  className={` rounded-2xl py-1 ${
                    activeTab === "tab2" ? "bg-blue-500" : "bg-gray-500"
                  }`}
                ></div>
              </div>
            </div>
            {/* Tab content */}
            <div className="p-4">
              <div
                className={`${activeTab === "tab1" ? "" : "hidden"}`}
                id="tabContent1"
              >
                <div className="h-[calc(100vh-20rem)] overflow-scroll hidescrollbar">
                  <div className="flex flex-col justify-start items-start py-3">
                    <div className="flex justify-start items-center mb-3">
                      <p className="text-blue-500 text-sm font-semibold">
                        Start Milestones
                      </p>
                      <span className="bg-yellow-light text-black text-xs font-medium ml-2 px-2 py-0.5   rounded-full">
                        Pending
                      </span>
                      {/* <span className="bg-yellow-bright text-black text-xs font-medium ml-2 px-2.5 py-0.5 rounded-full">
                        In progress
                      </span> */}
                    </div>
                    <div className="flex justify-start items-center mb-14">
                      {startMilestone.map((s, k) => (
                        <>
                          <div
                            key={k}
                            className="bg-gray-500 drop-shadow-md h-[200px] w-[200px] rounded-lg py-3 px-4"
                          >
                            <div className="mb-4 flex justify-between items-center">
                              <p className="text-blue-500 capitalize">
                                {s.milestone.type}
                              </p>
                              <span className="bg-yellow-light text-black text-xs font-medium ml-2 px-2 py-0.5 capitalize rounded-full">
                                {s.status}
                              </span>
                            </div>
                            <div className="text-sm">
                              <p className="text-gray-dark">
                                {MSData.startData[s.milestone.type].sText}{" "}
                                {s.milestone.text && s.milestone.text}{" "}
                                {MSData.startData[s.milestone.type].eText}
                              </p>
                              <button
                                onClick={() =>
                                  openModal(
                                    MSData.startData[s.milestone.type].modal,
                                    s,
                                    "startData"
                                  )
                                }
                                className="bg-transparent underline text-blue-500"
                              >
                                {MSData.startData[s.milestone.type].linkText}
                              </button>
                            </div>
                          </div>
                          {!(startMilestone.length - 1 == k) && (
                            <div className="border-t-4 border-solid border-purple-500 bg-purple-500 w-12"></div>
                          )}
                        </>
                      ))}
                    </div>
                    <div className="flex justify-start items-center mb-3">
                      {/* <p className="text-gray-light text-sm font-semibold"> */}
                      <p className="text-blue-500 text-sm font-semibold">
                        End Milestones
                      </p>
                      {/* <span className="bg-gray-light text-white-default text-xs font-medium ml-2 px-2.5 py-0.5 rounded-full"> */}
                      <span className="bg-yellow-light text-black text-xs font-medium ml-2 px-2.5 py-0.5 rounded-full">
                        Pending
                      </span>
                    </div>
                    <div className="flex justify-start items-center">
                      {endMilestone.map((s, k) => (
                        <>
                          <div
                            key={k}
                            className="bg-gray-500 drop-shadow-md h-[200px] w-[200px] rounded-lg py-3 px-4"
                          >
                            <div className="mb-4 flex justify-between items-center">
                              <p className="text-blue-500 capitalize">
                                {s.milestone.type}
                              </p>
                              <span className="bg-yellow-light text-black text-xs font-medium ml-2 px-2 py-0.5 capitalize rounded-full">
                                {s.status}
                              </span>
                            </div>
                            <div className="text-sm">
                              <p className="text-gray-dark">
                                {MSData.endData[s.milestone.type].sText}{" "}
                                {s.milestone.text && s.milestone.text}{" "}
                                {MSData.endData[s.milestone.type].eText}
                              </p>
                              <button
                                onClick={() =>
                                  openModal(
                                    MSData.endData[s.milestone.type].modal,
                                    s,
                                    "endData"
                                  )
                                }
                                className="bg-transparent underline text-blue-500"
                              >
                                {MSData.endData[s.milestone.type].linkText}
                              </button>
                            </div>
                          </div>
                          {!(endMilestone.length - 1 == k) && (
                            <div className="border-t-4 border-solid border-purple-500 bg-purple-500 w-12"></div>
                          )}
                        </>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              <div
                className={`${activeTab === "tab2" ? "" : "hidden"}`}
                id="tabContent2"
              >
                <div className="h-[calc(100vh-20rem)] hidescrollbar overflow-y-scroll">
                  <div className="flex flex-col justify-start items-start py-3">
                    <p className="text-blue-500 text-sm font-semibold mb-3">
                      Issues
                    </p>
                    {issuesArray.length ? (
                      ""
                    ) : (
                      <div className="flex h-40 w-full justify-center items-center">
                        <p className="text-black text-base mb-3">
                          No Issues to show
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Code modal */}
      <Modal
        modalTitle={"Code"}
        isOpen={modals.CodeModal}
        onClose={() => closeModal("CodeModal")}
      >
        <div>
          <div className="px-8 pb-5 flex justify-center flex-col">
            <p className=" text-sm mt-3">
              Auto generated code that vendor will have to confirm{" "}
              {MSData[modalData.type]?.code.modalText}
            </p>
            <div className="flex justify-center gap-2 mt-5">
              {String(modalData.data?.info?.code)
                .split("")
                .map((ele) => (
                  <div className={`border px-6 py-3 text-3xl font-semibold ${codeData?'text-green-500 bg-green-light border-gray-light':'bg-orange-200 text-orange-500 border-orange-200'}`}>
                    {ele}
                  </div>
                ))}
            </div>
            <button className={`${codeData?'text-green-500 bg-green-light':'bg-orange-200 text-orange-500'} bg-opacity-50 w-full mt-4 mb-2 py-2 text-sm rounded-full`}>
              {codeData?"Accepted":"Pending"}
            </button>
            {/* <div className="flex justify-end items-center gap-4 mt-8 text-sm">
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Previous
              </button>
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Next
              </button>
            </div> */}
          </div>
        </div>
      </Modal>
      {/* Picture modal */}
      <Modal
        modalTitle={"Picture"}
        isOpen={modals.PicModal}
        onClose={() => closeModal("PicModal")}
      >
        <div>
          <div className="px-8 pb-5 flex justify-center flex-col">
            <p className="font-semibold text-gray-light mt-3">
              Upload picture of{" "}
              <span className="text-black">
                {modalData.data?.milestone.text}
              </span>{" "}
              {MSData[modalData.type]?.photo.eText}
            </p>
            <p className="text-semibold text-sm text-black mt-3">
              Submitted image:
            </p>
            {/* <p className="my-5 text-center text-sm">No images to show</p> */}
            {/* <div className="grid grid-cols-10 gap-4 mt-5">
              {imageArray.map((ele) => (
                <img
                  className="col-span-5 h-40 w-44 rounded-xl object-cover"
                  src={ele}
                ></img>
              ))}
            </div> */}
            {
              imageArray.length?<div className="grid grid-cols-10 gap-4 mt-5">
              {imageArray.map((ele) => {
                return(
                <img
                  className="col-span-5 h-40 w-44 rounded-xl object-cover"
                  src={`http://65.1.234.182/${ele}`}
                ></img>
              )})}
            </div>
            :
            <p className="my-5 text-center text-sm">No images to show</p>

            }
            <button className="bg-blue-500 text-white-default w-full mt-4 mb-2 py-2 text-sm rounded-full">
              Accept
            </button>
            {/* <div className="flex justify-end items-center gap-4 mt-8 text-sm">
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Previous
              </button>
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Next
              </button>
            </div> */}
          </div>
        </div>
      </Modal>
      {/* Video modal */}
      <Modal
        modalTitle={"Video"}
        isOpen={modals.VideoModal}
        onClose={() => closeModal("VideoModal")}
      >
        <div>
          <div className="px-8 pb-5 flex justify-center flex-col">
            <p className="font-semibold text-gray-light mt-3">
              Upload video of{" "}
              <span className="text-black">
                {modalData.data?.milestone.text}
              </span>{" "}
              {MSData[modalData.type]?.video.eText}
            </p>
            <p className="text-semibold text-sm text-black mt-3">
              Submitted video:
            </p>
            <p className="my-5 text-center text-sm">No video to show</p>
            {/* <div className=" mt-5">
              <video
                autoPlay
                loop
                muted
                controls
                className="h-60 w-full rounded-xl object-cover"
                src="/images/test4.mp4"
              />
            </div> */}
            <button className="bg-blue-500 text-white-default w-full mt-4 mb-2 py-2 text-sm rounded-full">
              Accept
            </button>
            {/* <div className="flex justify-end items-center gap-4 mt-8 text-sm">
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Previous
              </button>
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Next
              </button>
            </div> */}
          </div>
        </div>
      </Modal>
      {/* CheckList modal */}
      <Modal
        modalTitle={"CheckList"}
        isOpen={modals.CListModal}
        onClose={() => closeModal("CListModal")}
      >
        <div>
          <div className="px-8 pb-5 flex justify-center flex-col">
            <p className="font-semibold text-gray-light mt-3">
              {MSData[modalData.type]?.checklist.sText}{" "}
              <span className="text-black">
                {modalData.data?.milestone.text}
              </span>{" "}
              {MSData[modalData.type]?.checklist.eText}
            </p>
            <div className="h-40 overflow-y-scroll hidescrollbar-full p-2 bg-gray-600 w-full rounded-lg mt-5">
              {modalData.data?.milestone.items.map((item, k) => (
                <div key={k} className="rounded-lg mb-2 p-1 bg-gray-500 flex justify-between items-center">
                  <p className="font-semibold">{item}</p>
                  <p></p>
                </div>
              ))}
            </div>
            <button className="bg-blue-500 text-white-default w-full mt-4 mb-2 py-2 text-sm rounded-full">
              Accept
            </button>
            {/* <div className="flex justify-end items-center gap-4 mt-8 text-sm">
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Previous
              </button>
              <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Next
              </button>
            </div> */}
          </div>
        </div>
      </Modal>
      {/* Checkbox modal */}
      <Modal
        modalTitle={"Checkbox"}
        isOpen={modals.CBoxModal}
        onClose={() => closeModal("CBoxModal")}
      >
        <div>
          <div className="px-8 pb-5 flex justify-center flex-col">
            <p className=" text-gray-light mt-3">
            {MSData[modalData.type]?.checkbox.sText}{" "}
              <span className="text-black">
                {modalData.data?.milestone.text}
              </span>{" "}
              {MSData[modalData.type]?.checkbox.eText}
            </p>
            <button className="bg-green-light bg-opacity-50 text-green-500 w-full mt-4 py-2 text-sm rounded-full">
              Accepted
            </button>
            <div className="flex justify-end items-center gap-4 mt-8 text-sm">
              {/* <button className="bg-gray-light text-white-default rounded-full py-2 px-4 w-[110px]">
                Previous
              </button> */}
              <button className="bg-blue-500 text-white-default rounded-full py-2 px-6">
                Mark as complete
              </button>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
}
